"==========================
"===== Enhance Editor =====
"==========================

set number
set relativenumber
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set ignorecase
set smartcase
set notimeout
set backspace=2
set viminfo='1000,<500

let mapleader="\<SPACE>"

if empty(glob('~/.vim/autoload/plug.vim'))
  :exe '!curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  au VimEnter * PlugInstall --sync | source $MYVIMRC
endif

"=====================
"=== plugins begin ===
"=====================

call plug#begin('~/.vim/plugged')
  Plug 'itchyny/lightline.vim'
  Plug 'preservim/nerdtree'
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  Plug 'preservim/nerdcommenter'
  Plug 'VundleVim/Vundle.vim'
  Plug 'Valloric/YouCompleteMe'
  Plug 'davidhalter/jedi-vim'
call plug#end()

" ============  nerdtree ===============
set encoding=utf-8  
set termencoding=utf-8   
set fileencoding=chinese 
set fileencodings=ucs-bom,utf-8,chinese   
set langmenu=zh_CN.utf-8  
language messages zh_cn.utf-8

"Show line number.
let g:NERDTreeShowlineNumber=1

"Show hide file.
let g:NERDTreeHidden=0

"Show Node model.
let NERDTreeDirArrows=1

"Delete help information at the top
let NERDTreeMinimalUI=1

let g:NERDTreeDirArrowExpandable = '+'
let g:NERDTreeDirArrowCollapsible = '-'

autocmd VimEnter * NERDTree

" ============  airline  ===============
set laststatus=2
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

" ======================================
" ============ YCM CONFIG ==============
" ======================================

"默认配置文件路径"
let g:ycm_global_ycm_extra_conf = '~/.vim/plugged/YouCompleteMe/.ycm_extra_conf.py'
"配置全局路径
"设置C 系列语言格式配置文件路径
let g:ycm_global_ycm_extra_conf = "~/.vim/.ycm_extra_conf.py"

"log"
let g:ycm_server_keep_logfiles=1
let g:ycm_sever_log_level='debug'

"打开vim时不再询问是否加载ycm_extra_conf.py配置"
"let g:ycm_confirm_extra_conf=0
"set completeopt=longest,menu

"python解释器路径"
let g:ycm_path_to_python_interpreter='/opt/homebrew/bin/python3.10'
let g:ycm_python_binary_path = '/opt/homebrew/bin/python3.10'
let g:ycm_server_python_interpreter='/opt/homebrew/bin/python3.10'

"是否开启语义补全"
let g:ycm_seed_identifiers_with_syntax=1

"是否在注释中也开启补全"
let g:ycm_complete_in_comments=1
let g:ycm_collect_identifiers_from_comments_and_strings = 0

"开始补全的字符数"
let g:ycm_min_num_of_chars_for_completion=2

"补全后自动关机预览窗口"
let g:ycm_autoclose_preview_window_after_completion=1

"禁止缓存匹配项,每次都重新生成匹配项"
let g:ycm_cache_omnifunc=0

"字符串中也开启补全"
let g:ycm_complete_in_strings = 1
let g:ycm_seed_identifiers_with_syntax=1 "补全关键字
let g:ycm_max_diagnostics_to_display = 30 "maximum number of diagnostics shown to the user when errors or warnings are detected in the file

"离开插入模式后自动关闭预览窗口"
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

"按下2个字母后自动语意补全(检测上下文环境)
let g:ycm_semantic_triggers = {
\ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
\ 'cs,lua,javascript': ['re!\w{2}'],
\ }

"设置提示高亮背景颜色
"highlight PMenu ctermfg=0 ctermbg=242 guifg=black guibg=darkgrey
"highlight PMenuSel ctermfg=242 ctermbg=8 guifg=darkgrey guibg=black
nmap <leader>gd :YcmDiags<CR>
nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>           " 跳转到申明处
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>            " 跳转到定义处
nnoremap <leader>ga :YcmCompleter GoToDefinitionElseDeclaration<CR>


